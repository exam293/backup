Purpose of study
A high-quality computing education equips pupils to use computational thinking and
creativity to understand and change the world. Computing has deep links with
mathematics, science, and design and technology, and provides insights into both natural
and artificial systems. The core of computing is computer science, in which pupils are
taught the principles of information and computation, how digital systems work, and how to
put this knowledge to use through programming. Building on this knowledge and
understanding, pupils are equipped to use information technology to create programs,
systems and a range of content. Computing also ensures that pupils become digitally
literate – able to use, and express themselves and develop their ideas through, information
and communication technology – at a level suitable for the future workplace and as active
participants in a digital world.

Aims
The national curriculum for computing aims to ensure that all pupils:
* can understand and apply the fundamental principles and concepts of computer
science, including abstraction, logic, algorithms and data representation

* can analyse problems in computational terms, and have repeated practical experience
of writing computer programs in order to solve such problems

* can evaluate and apply information technology, including new or unfamiliar
technologies, analytically to solve problems

* are responsible, competent, confident and creative users of information and
communication technology.

Attainment targets
By the end of each key stage, pupils are expected to know, apply and understand the
matters, skills and processes specified in the relevant programme of study.


Subject content

Key stage 3
Pupils should be taught to:
* design, use and evaluate computational abstractions that model the state and
behaviour of real-world problems and physical systems

* understand several key algorithms that reflect computational thinking [for example,
ones for sorting and searching]; use logical reasoning to compare the utility of
alternative algorithms for the same problem

* use two or more programming languages, at least one of which is textual, to solve a
variety of computational problems; make appropriate use of data structures [for
example, lists, tables or arrays]; design and develop modular programs that use
procedures or functions

* understand simple Boolean logic [for example, AND, OR and NOT] and some of its
uses in circuits and programming; understand how numbers can be represented in
binary, and be able to carry out simple operations on binary numbers [for example,
binary addition, and conversion between binary and decimal]

* understand the hardware and software components that make up computer systems,
and how they communicate with one another and with other systems

* understand how instructions are stored and executed within a computer system;
understand how data of various types (including text, sounds and pictures) can be
represented and manipulated digitally, in the form of binary digits

* undertake creative projects that involve selecting, using, and combining multiple
applications, preferably across a range of devices, to achieve challenging goals,
including collecting and analysing data and meeting the needs of known users

* create, re-use, revise and re-purpose digital artefacts for a given audience, with
attention to trustworthiness, design and usability

* understand a range of ways to use technology safely, respectfully, responsibly and
securely, including protecting their online identity and privacy; recognise inappropriate
content, contact and conduct and know how to report concerns.